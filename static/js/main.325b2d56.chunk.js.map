{"version":3,"sources":["images/friends/friend1.jpg","images/friends/friend2.jpg","utils/GlobalState.js","components/Form.js","components/EmployeeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmployeeContext","createContext","Employees","id","firstName","lastName","phoneNumber","image","CurrentFilter","CurrentSort","SortDirection","Provider","reducer","action","type","Data","filter","item","index","includes","term","department","sort","a","b","EmployeeProvider","value","props","useReducer","state","dispatch","useEmployeeContext","useContext","Form","inputRef","useRef","className","onSubmit","e","preventDefault","console","log","current","ref","placeholder","onClick","clearFilter","sortToggle","active","direction","EmployeeList","stopPropagation","property","hasOwnProperty","classNames","map","key","src","process","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.325b2d56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/friend1.48482b1b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/friend2.896e429d.jpg\";","import React, { createContext, useReducer, useContext } from \"react\";\nimport Data from \"../data/data.json\";\n\nconst EmployeeContext = createContext({\n  Employees: [ {\n      id: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n      image: \"\"}],\n  CurrentFilter: \"\",\n  CurrentSort: \"\",\n  SortDirection: \"\"\n\n});\nconst { Provider } = EmployeeContext;\n\nfunction reducer({Employees, CurrentFilter, CurrentSort, SortDirection}, action) {\n\n // console.log(\"In the reducer.\");\n  switch (action.type) {\n    case \"clear\":\n      return ({Employees: Data, \n               CurrentFilter: \"\", CurrentSort:\"\", SortDirection:\"\"});\n  case \"search\":\n    // whenever we do a sort, we want to start with the full list.\n   \n    let filteredEmployeeList  = Employees.filter((item, index) => {\n            return item.firstName.includes(action.term) ||\n            item.lastName.includes(action.term) ||\n            item.phoneNumber.includes(action.term) || \n            item.department.includes(action.term); });\n    return ({ Employees: filteredEmployeeList, \n              CurrentFilter: action.term, \n              CurrentSort: \"\",\n              SortDirection: \"\"});\n  case \"sort\":\n    if (CurrentSort === action.term)\n    {\n      // we are sorting the same column over again,\n      // so we can toggle the sortDirection\n      // console.log(\"Toggling\");\n      SortDirection === \"asc\" ? \n      SortDirection = \"desc\" :\n      SortDirection = \"asc\";\n    }\n    else {\n      // we are sorting a different table header\n      // so let's start the sortDirection out in the \n      // ascending order\n      // console.log(\"New Tab\");\n      SortDirection = \"asc\";\n    }\n   \n    let sortedEmployeeList = [];\n    if (SortDirection === \"asc\") {\n      sortedEmployeeList = Employees.sort((a, b) => (a[action.term] > b[action.term]) ? 1 : -1);\n    }\n    else {\n      sortedEmployeeList = Employees.sort((b, a) => (a[action.term] > b[action.term]) ? 1 : -1);\n    }\n    return ({ Employees: sortedEmployeeList, \n              CurrentFilter,\n              CurrentSort: action.term,\n              SortDirection});\n\n  default:\n    return {Employees, CurrentFilter, CurrentSort,SortDirection};\n  }\n}\n\nfunction EmployeeProvider({ value = [], ...props }) {\n  const [state, dispatch] = useReducer(reducer,\n    {Employees: Data, CurrentFilter: \"\", CurrentSort: \"\", SortDirection: \"asc\"});\n\n  return <Provider value={[state, dispatch]} {...props} />;\n}\n\nfunction useEmployeeContext() {\n  return useContext(EmployeeContext);\n}\n\nexport { EmployeeProvider, useEmployeeContext };\n","import React, { useRef } from \"react\";\nimport { useEmployeeContext } from \"../utils/GlobalState\";\n\nfunction Form() {\n  const inputRef = useRef();\n  const [_, dispatch] = useEmployeeContext();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    console.log(\"xxxxxxxxxx\");\n    dispatch({\n      type: \"search\",\n      term: inputRef.current.value\n    });\n    inputRef.current.value = \"\";\n  }\n\n  function clearFilter(e) {\n    e.preventDefault();\n    console.log(\"cccccccccc\");\n    dispatch({\n      type: \"clear\",\n      term: \"\"\n    });\n    inputRef.current.value = \"\";\n\n  }\n\n  return (\n    <div  className=\"filterForm\">\n      <div className='filterTitle'>Filter Employee List:</div>\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"searchInput\"\n          ref={inputRef}\n          placeholder=\"Filter the employee list by...\"\n        />\n        <button className=\"btn btn-primary\" type=\"submit\">\n         Filter\n        </button>\n        <button className=\"btn btn-success\" onClick={(e)=>clearFilter(e)}>\n         Clear Filter\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport { useEmployeeContext } from \"../utils/GlobalState\";\n// import desc from \"../images/desc.svg\";\nimport friend1 from \"../images/friends/friend1.jpg\";\nimport friend2 from \"../images/friends/friend2.jpg\";\n\nlet sortToggle = {\n  id: {\n    active: false,\n    direction: \"asc\"\n  },\n  firstName: {\n    active: false,\n    direction: \"asc\"\n  },\n  lastName: {\n    active: false,\n    direction: \"asc\"\n  },\n  phoneNumber: {\n    active: false,\n    direction: \"asc\"\n  },\n  department: {\n    active: false,\n    direction: \"asc\"\n  }\n\n}\n\n\nfunction EmployeeList() {\n  const [state, dispatch] = useEmployeeContext();\n\n  const styles = {\n    unsorted: {\n    },\n    asc: {\n      color: \"#ffffff\",\n      backgroundColor: \"#00bb00\"\n    },\n    desc: {\n    \n    }\n  }\n\n  function sort(e, term) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (sortToggle[term].active) {\n      // if this sort term is already active\n      // then just change the direction.\n      sortToggle[term].direction = sortToggle[term].direction === \"asc\" ? \"desc\" : \"asc\";\n    } else {\n      // otherwise set it to active, set the others to inactive and set the direction to ascending\n      for (var property in sortToggle) {\n        if (sortToggle.hasOwnProperty(property)) {\n          // Set the others back to normal\n          sortToggle[property].active = false;\n          sortToggle[property].direction = \"asc\";\n        }\n      }\n\n      sortToggle[term].active = true;\n      sortToggle[term].direction = \"asc\";\n    }\n    console.log(sortToggle);\n\n\n    dispatch({\n      type: \"sort\",\n      term: term\n    });\n\n\n  }\n  return (\n    <div>\n      <div className='listTitle'>Employee List:</div>\n      {state.CurrentFilter ?\n        <div classNames='listSubTitle'>Filtering by: {state.CurrentFilter}</div>\n        : <div className='listSubTitle'></div>}\n\n   \n      <table className=\"listTable\">\n        <thead>\n          <tr className=\"headerRow\">\n\n\n            <td></td>\n            <td \n\n            \n            className={\n              !sortToggle.id.active ? \"\" :\n              (sortToggle.id.active &&\n              (sortToggle.id.direction === \"desc\")) ?\n                  \"desc\" : \"asc\"\n\n            } \n          \n          onClick={(e) => sort(e, \"id\")} >\n              ID#\n                </td>\n\n            <td className={\n              !sortToggle.firstName.active ? \"\" :\n              (sortToggle.firstName.active &&\n              (sortToggle.firstName.direction === \"desc\")) ?\n                  \"desc\" : \"asc\"\n            }\n              onClick={(e) => sort(e, \"firstName\")}>First Name</td>\n\n            <td\n              className={\n              !sortToggle.lastName.active ? \"\" :\n              (sortToggle.lastName.active &&\n                (sortToggle.lastName.direction === \"desc\")) ?\n                    \"desc\" : \"asc\"\n              }\n              onClick={(e) => sort(e, \"lastName\")}>Last Name</td>\n            <td className={\n                !sortToggle.phoneNumber.active ? \"\" :\n                (sortToggle.phoneNumber.active &&\n                (sortToggle.phoneNumber.direction === \"desc\")) ?\n                    \"desc\" : \"asc\"\n            }\n              onClick={(e) => sort(e, \"phoneNumber\")}>Phone </td>\n            <td className={\n                !sortToggle.department.active ? \"\" :\n                (sortToggle.department.active &&\n                (sortToggle.department.direction === \"desc\")) ?\n                    \"desc\" : \"asc\"\n            }\n              onClick={(e) => sort(e, \"department\")}>Department</td>\n          </tr>\n        </thead>\n        <tbody>\n          {/* key={item.id} */}\n          {state.Employees.map((item, index) => (\n            <tr className=\"listRow\" key={index}>\n              <td className=\"listCell avatarContainer\" key='0'>\n                <img src={process.env.PUBLIC_URL + '/images/friends/' + item.image + '.jpg'}  className=\"avatar\" />  \n                 {/* {item.image}  */}\n              </td>\n              <td className=\"listCell\" key='1'>\n                {item.id}\n              </td>\n\n              <td className=\"listCell\" key='2'>\n                {item.firstName}\n              </td>\n              <td className=\"listCell\" key='3'>\n                {item.lastName}\n              </td>\n              <td className=\"listCell\" key='4'>\n                {item.phoneNumber}\n              </td>\n              <td className=\"listCell\" key='5'>\n                {item.department}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default EmployeeList;\n\n\n","import React from 'react';\n// import logo from './logo.svg';\nimport Form from \"./components/Form\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport { EmployeeProvider } from \"./utils/GlobalState\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <EmployeeProvider>\n        <Form />\n        <EmployeeList />\n      </EmployeeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}